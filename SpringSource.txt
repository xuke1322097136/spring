#用来记录Spring的整个源码流程，咱们主要关注点的是refresh方法里面的每一步实现。
第一步：prepareRefresh()方法的作用是刷新前的预处理工作：
       1. initPropertySources()：初始化一些属性设置，它是由子类来自定义个性化的属性的；
       2. getEnvironment().validateRequiredProperties()：校验属性的合法性；
       3. this.earlyApplicationEvents = new LinkedHashSet<>()：用来保存容器中注册的早期事件，以后利用我们的事件派发器将
           这些事件派发出去。
第二步：obtainFreshBeanFactory()：获取BeanFactory。
        1. refreshBeanFactory()：刷新Bean工厂。主要工作是创建了一个BeanFactory并设置Id值，参见
               GenericApplicationContext的源码：this.beanFactory = new DefaultListableBeanFactory();（第111行）
        2. getBeanFactory()：创建BeanFactory并返回它，该BeanFactory就是直接返回上面创建的DefaultListableBeanFactory对象。
第三步： prepareBeanFactory：BeanFactory的预准备工作，其实就是对BeanFactory一些值进行设置。
        1. 设置BeanFactory的类加载器/支持的表达式等等；
        2. 添加部分BeanPostProcessor，如ApplicationContextAwareProcessor：它的作用其实就是在bean初始化以后，判断bean是否
           实现了ApplicationContextAware接口的；
        3. 设置忽略的自动装配的接口，如EnvironmentAware/EmbeddedValueResolverAware...等等；
        4. 注册可以解析的自动装配，也就是说，我们可以在任何组件里面Autowired（自动注入）这些类都是可以的，如BeanFactory/
           ResourceLoader/ApplicationEventPublisher/ApplicationContext等；
        5. 添加部分BeanPostProcessor，如ApplicationListenerDetector；
        6. 添加编译时的AspectJ支持，第657到660行的代码；
        7. 给BeanFactory中注册一些组件，如：environment【ConfigurableEnvironment类型】/systemProperties【Map<String, Object>
         类型】/systemEnvironment【Map<String, Object>类型】，如果我们以后要用的话，也可以直接Autowired。
第四步： postProcessBeanFactory(beanFactory)：BeanFactory准备工作完成以后进行的后置处理工作。我们可以发现在
         AbstractApplicationContext类中是一个空实现，子类可以通过重写这个方法来在BeanFactory创建并预准备完成后做进一步的设置。
============================================以上是BeanFactory的创建及预准备工作===========================================
第五步：invokeBeanFactoryPostProcessors(beanFactory)：执行BeanFactoryPostProcessor，BeanFactoryPostProcessor是BeanFactory
        的后置处理器，在BeanFactory标准初始化之后执行的。这一步的原理其实可以结合IOCTest_Extend/ExtendConfig/
        MyBeanFactoryPostProcessor/MyBeanDefinitionRegistryPostProcessor中介绍的原理来看。【AOP原理.txt】一文中也有简单介绍，
        我们在这再来回顾一下，主要看一下BeanFactoryPostProcessor接口以及它的子接口：BeanDefinitionRegistryPostProcessor
        【可以用来给容器中额外添加组件，它的优先级比BeanFactoryPostProcessor接口要高】：
        1. 会来到PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors()方法，其实它就是分别调用每个
           BeanFactoryPostProcessor的postProcessBeanDefinitionRegistry方法，具体过程为：
           a.) 获取所有的BeanDefinitionRegistryPostProcessor；
           b.) 判断这些BeanDefinitionRegistryPostProcessor有没有实现了PriorityOrdered接口的，有的话，那么会让它执行
               invokeBeanDefinitionRegistryPostProcessors方法，点进去这个方法其实就是回调它们的
               postProcessBeanDefinitionRegistry方法；
           c.) 同理，判断BeanDefinitionRegistryPostProcessor有没有实现了Ordered接口，如果有的话，那么它也会回调
               postProcessBeanDefinitionRegistry方法；
           d.) 最后执行没有是实现任何优先级或者是接口顺序的BeanDefinitionRegistryPostProcessors。
        2. 接着执行BeanFactoryPostProcessor接口里的postProcessor.postProcessBeanFactory(beanFactory)方法，具体的调用过程
           和上面基本一致：
           a.) 获取所有的BeanFactoryPostProcessor放置到postProcessorNames里面，然后会将这些postProcessorNames里面的这些
               后置处理器根据优先级分门别类，分别放置到priorityOrderedPostProcessors/orderedPostProcessorNames/
               nonOrderedPostProcessorNames里面；
            b.) 和上面的意思基本是一样的，只是这里每一类后置处理器用了一个临时变量来存储，获取到priorityOrderedPostProcessors
               ，然后调用它里面的postProcessBeanFactory()方法；
            c.) 拿到orderedPostProcessorNames里面的后置处理器，调用postProcessBeanFactory()方法；
            d.) 拿到nonOrderedPostProcessorNames里面的后置处理器，调用postProcessBeanFactory()方法。
第六步：registerBeanPostProcessors(beanFactory)：注册BeanPostProcessors(bean的后置处理器)，它的作用是拦截bean的整个创建过程，
       不同接口类型的BeanPostProcessor在bean创建前后所执行的时机是不一样的。
       同样的，我们之前也分析过这一步，可以参考MainConfigOfLifeCycle/MyBeanPostProcessor以及【AOP原理.txt】一文的(2.C.6.c)
       部分都有详细介绍，咱们在这再次回顾一下，具体步骤如下：
       1. 获取到所有的BeanPostProcessor，这里需要注意的是它旗下有很多不同类型的BeanPostProcessor，常用的有：
          DestructionAwareBeanPostProcessor/InstantiationAwareBeanPostProcessor/MergedBeanDefinitionPostProcessor，其实
          前面两个BeanPostProcessor，我们都见过。InstantiationAwareBeanPostProcessor在分析切面原理的时候也详细分析过了，
          可以参考【AOP原理.txt】一文。DestructionAwareBeanPostProcessor其实我们也说过，它是用来执行bean的销毁方法的
          后置处理器，例如DisposableBean接口里面的destroy方法就是由该后置处理器来负责执行的。
          DestructionAwareBeanPostProcessor有一个子类：InitDestroyAnnotationBeanPostProcessor，它其实就是用来处理
           @PostConstruct注解和@PreDestroy注解的。【具体在MainConfigOfLifeCycle中有介绍】。
           注意： BeanFactoryPostProcessor接口和BeanPostProcessor并无任何继承关系。
           a.) 获取到所有的BeanPostProcessor，然后将他们划分为4大类，通过PriorityOrdered和Ordered来指定优先级和顺序，然后将
               它们分别存储到4个不同的临时变量中，和上面的BeanFactoryPostProcessor是不是差不多？分别有：
                priorityOrderedPostProcessors/orderedPostProcessorNames/ nonOrderedPostProcessorNames/
                internalPostProcessors。此外它会检查BeanPostProcessor是不是MergedBeanDefinitionPostProcessor类型的
                后置处理器，如果是的话，它又会将该后置处理器添加到一个叫internalPostProcessors的临时变量中；
           b.) 先注册PriorityOrdered优先级接口的BeanPostProcessor，调用的是registerBeanPostProcessors()方法完成注册，
               所谓的注册，我们点进源码里可以看到，它其实就是将该BeanPostProcessor添加到BeanFactory中。源码见下面这一句：
                         beanFactory.addBeanPostProcessor(postProcessor);
           c.) 接着注册Ordered接口的BeanPostProcessor，分别添加到BeanFactory中；
           d.) 继续注册all regular BeanPostProcessors，即，注册既没有实现PriorityOrdered，也没有实现Ordered接口的
                BeanPostProcessor，其实就是注册存放在变量nonOrderedPostProcessorNames里面的BeanPostProcessor；
           e.)  然后注册实现了MergedBeanDefinitionPostProcessor接口类型的后置处理器，即，注册的是存放在临时变量
                internalPostProcessors里面的后置处理器。
           f.)其实最后还注册了一个叫ApplicationListenerDetector的后置处理器，它的作用是调用postProcessAfterInitialization
              方法，在bean创建完成初始化了之后，检查创建的这些bean是不是事件监听器ApplicationListener，如果是的话，就将
               该bean添加到容器中。源码见下面这一句：
                         this.applicationContext.addApplicationListener((ApplicationListener<?>) bean);
第七步：initMessageSource()：这一步的作用是初始化MessageSource组件，该组件一般用来做国际化功能/消息绑定/消息解析等。
        1. 获取到BeanFactory；
        2. 查看容器中是否含有id名字为messageSource的MessageSource类型组件，如果有的话，则将它赋值给messageSource属性，
           如果没有的话，那么就会创建一个DelegatingMessageSource。MessageSource是用来取出配置文件中的某个key值，并按照
           区域信息获取值；
        3. 把创建好的messageSource注册到容器中，以后获取国际化配置文件的值的时候，我们可以自动注入MessageSource，并调用
           里面的getMessage方法。见源码：【MESSAGE_SOURCE_BEAN_NAME的值就是messageSource】
               beanFactory.registerSingleton(MESSAGE_SOURCE_BEAN_NAME, this.messageSource)。
第八步： initApplicationEventMulticaster()：初始化事件派发器。这里面的原理可以参见ListenerConfig/MyApplicationListener/
         BookService里面的分析。
          1. 获取到BeanFactory；
          2. 从容器中拿到id名为applicationEventMulticaster的ApplicationEventMulticaster类型的组件；
          3. 如果没上一步没有获取到的话，那么就会创建一个SimpleApplicationEventMulticaster，用它来帮我们派发事件；
          4. 将applicationEventMulticaster组件注册到BeanFactory中，以后我们想要直接使用的话，那么就可以直接自动注入。
第九步：onRefresh()：留给子类来使用的，如果子类重写这个方法的话，在容器刷新的时候我们可以自定义一些逻辑。
第十步：registerListeners()：将项目中的所有ApplicationListener注册到容器中。具体步骤为：
        1. 从容器中拿到所有的ApplicationListener；
        2. 将每个监听器添加到事件派发器中；源码如下：
             getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName);
        3. 派发之前步骤产生的一些早期事件。
第十一步：finishBeanFactoryInitialization(beanFactory)：初始化所有的单实例bean。具体步骤如下：
        1. 该方法点进去之后，会来到最后一步：beanFactory.preInstantiateSingletons()，该方法的作用是初始化剩下的单实例bean。
           a.) 获取容器中的所有bean，依次进行初始化和创建对象(for循环)；
           b.) 获取bean的定义信息：RootBeanDefinition；
           c.) 判断bean不是抽象的，是单实例的且不是懒加载的【用到的时候才创建对象】。
               I）判断bean是不是FactoryBean，即判断该bean是否是实现了FactoryBean接口的bean，如果是的话，它会利用工厂模式来
                  帮我们创建对象；
               II）如果不是工厂bean的话，它会getBean()来帮我们创建bean。
                   A.) getBean方法会调用doGetBean()方法；
                   B.) doGetBean()方法又会调用getSingleton()方法，该方法会从缓存中尝试着去拿单实例bean。如果这个bean能拿到
                       的话，则说明这个bean之前被创建过，被缓存到了一个叫singletonObjects的变量中，singletonObjects的
                       实际类型是一个Map:
                           Map<String, Object> singletonObjects = new ConcurrentHashMap<>(256);
                   C.) 缓存中要是找不到的话，那么就要真正的开始创建bean了；
                   D.) 标记当前bean已经被创建，这是为了保证多线程情况下的线程安全性；
                   E.) 获取bean的定义信息：RootBeanDefinition(源码第294行)；
                   F.) 获取当前bean依赖的那些bean，如果有的话，那么还是按照getBean方法来创建那些依赖的bean（源码第307行）；
                   G.) 启动单实例bean的创建流程，调用ObjectFactory工厂里面的getObject方法【jdk8里的Supplier函数式接口】
                        来创建bean，而getObject方法又会调用createBean方法，createBean方法的逻辑又可以细分为：
                         (1) 拿到bean的定义信息，并clone了一份bean的定义信息，以供下面的动态代理对象使用（第470行到474行）；
                         (2) Object bean = resolveBeforeInstantiation(beanName, mbdToUse):这一步是让BeanPostProcessor先
                             拦截对象的创建过程，返回一个代理对象；这个BeanPostProcessor有点反常，因为一般的BeanPostProcessor
                             都是在bean创建完成之后，在bean初始化前后进行拦截的。而现在的情况是，我们根本就还没创建对象就给
                             拦截了。resolveBeforeInstantiation方法点进去之后，可以看到它里面有一个判断，
                             hasInstantiationAwareBeanPostProcessors()，可以知道，此时工作的是
                             InstantiationAwareBeanPostProcessor类型的后置处理器，它负责在bean对象创建之前调用，触发它的
                             postProcessBeforeInstantiation()方法，如果该方法有返回值的话，那么会接着触发该后置处理器的
                             applyBeanPostProcessorsAfterInitialization()方法；【这里其实主要就是为了返回一个代理对象。】
                          (3) 如果上面的InstantiationAwareBeanPostProcessor后置处理器没能返回【代理对象】的话，接下来会调用
                              doCreateBean()方法创建bean，具体该方法的逻辑又可以细分为：
                                 (a.) doCreateBean()方法里面会调用createBeanInstance来创建bean实例，可以利用bean的
                                      工厂方法【即利用@Bean注解标注的方法】/对象的构造器来创建bean的实例，里面牵涉到了
                                      大量的反射机制；
                                 (b.) 调用applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName)允许bean的
                                      后置处理器来修改bean的定义信息，其实就是调用MergedBeanDefinitionPostProcessor
                                      后置处理器的MergedBeanDefinitionPostProcessor.postProcessMergedBeanDefinition()方法；
                                 (c.) populateBean(beanName, mbd, instanceWrapper):为bean的属性赋值。在我们为属性赋值之前
                                      还会有一些操作，具体看populateBean方法的实现：
                                      (I.) 赋值之前，拿到InstantiationAwareBeanPostProcessor后置处理器，它会调用它的
                                           postProcessAfterInstantiation()方法，怎么跟上面的（2）步有一样的操作了呢？
                                      (II.) 接着后面它又会拿到这个类型的后置处理器（即InstantiationAwareBeanPostProcessor
                                            类型），然后调用它的postProcessPropertyValues方法（见源码第1383行）；
                                      (III.) applyPropertyValues(beanName, mbd, bw, pvs):到这里才是真正的为bean属性赋值，
                                             利用反射，调用setter方法。
                                 (d.) 调用initializeBean来初始化bean，具体的步骤有：
                                       （I.）invokeAwareMethods(beanName, bean):执行XXXAware接口的方法，如：BeanNameAware/
                                             BeanClassLoaderAware/BeanFactoryAware，回调这些接口里面的方法；
                                       （II.）接下来调用applyBeanPostProcessorsBeforeInitialization方法，该方法会调用
                                              BeanPostProcessor.postProcessBeforeInitialization()方法；
                                       （III.）调用invokeInitMethods(beanName, wrappedBean, mbd)方法来完成初始化操作。
                                               从这个方法中，我们也可以看到有很多种初始化bean的方法，比如:
                                               InitializingBean.afterPropertiesSet()方法【DefinedBeanLifeCycle里面可以
                                               看到】/手动利用initMethod属性给bean指定初始化方法【MainConfigOfLifeCycle
                                               里面的LifeCycle这个bean就是利用的这种方式】，在
                                               invokeCustomInitMethod(beanName, bean, mbd)这里完成调用;；
                                       （IV）调用applyBeanPostProcessorsAfterInitialization方法，执行后置处理器的
                                             BeanPostProcessor.beanPostProcessorsAfterInitialization方法.
                                 (e.) 调用registerDisposableBeanIfNecessary(beanName, bean, mbd)：【注册】bean的销毁方法，
                                       记住在这只是注册，真正的销毁是在我们关闭容器的时候完成的。之前写的DefinedBeanLifeCycle
                                       里面我们就实现了DisposableBean接口。
                                 (f.) 至此为止， doCreateBean()方法终于调用完成了，也代表bean在此时终于是创建完成了。
                   H.) 到此为止，createBean方法也执行完成了，bean对象也就创建完成了。
                   I.) getObject方法也就拿到了创建的bean实例。
                   J.) 在拿到bean实例之后，会调用addSingleton(beanName, singletonObject)（源码第248行）将新创建的bean加入到
                       缓存中，即一个一个的Map中去，如singletonObjects/singletonFactories/earlySingletonObjects/
                       registeredSingletons。【补充一句：IOC容器其实就是这些Map，很多的Map里面保存了单实例bean/环境信息等】
               III) 到此为止，getBean()方法也算是执行完了；
               IV） 所有的bean都利用getBean()方法创建完成之后，检查这些bean是不是SmartInitializingSingleton接口的，如果
                    是的话，那么就会执行afterSingletonsInstantiated()方法。
        2. 到此为止，beanFactory.preInstantiateSingletons()这一步就完成了，即所有的单实例 bean都完成了，也标志着
           finishBeanFactoryInitialization这一大步也算是完成了。
第十二步：finishRefresh():完成BeanFactory的初始化创建工作，IOC容器也创建完成了，代表着完成了整个容器的刷新工作，它的具体流程
         主要有：
         1. clearResourceCaches()：清除context级别的资源缓存【这是不是最近的Spring版本才加上去的？】
         2. initLifecycleProcessor()：初始化跟生命周期有关的后置处理器，允许我们在容器的生命周期期间利用onRefresh/onClose()
            进行一些回调。可以写一个LifecycleProcessor接口的实现类，可以在BeanFactory刷新完成和关闭的时候调用那两个方法。
            默认的情况下，它会从容器中找id名为lifecycleProcessor的处理器，没有的话，那么会创建一个DefaultLifecycleProcessor
            类型的生命周期处理器；
         3.  getLifecycleProcessor().onRefresh()：拿到上面的生命周期处理器，回调onRefresh()方法，该生命周期是监听BeanFactory
            的生命周期处理器；
         4. publishEvent(new ContextRefreshedEvent(this))：发布容器刷新完成事件。可以查看ListenerConfig里面的详细解释；
         5. LiveBeansView.registerApplicationContext(this)：暴漏一些MBean。


==========================================Spring源码总结=====================================================
1. Spring容器在启动的时候，先会保存所有注册进来的Bean的定义信息：
    a.) 可以利用xml文件注册bean，如：<bean>；
    b.) 注解注册bean：@Service/@Component/@Bean等等
2. Spring容器会在合适的时机创建这些bean：
   a.) 用到这个bean的时候，可以利用getBean()方法创建bean，创建好 以后保存在容器中；
   b.) 统一创建剩下的bean的时候，即在finishBeanFactoryInitialization()这一步完成。
【3. 后置处理器】：每一个bean创建完成以后，都会利用各种后置处理器进行处理，来增强bean的功能，例如我们常见的
   AutowiredAnnotationBeanPostProcessor:处理自动注入。
   AnnotationAwareAspectJAutoProxyCreator:来做AOP功能，为bean创建代理对象，通过代理对象的机制来增强bean的AOP功能。
   例如还有一些用来增强功能注解【即EnableXXX这种注解】的后置处理器：AsyncAnnotationBeanPostProcessor,用来处理异步功能的。
4. Spring的事件驱动模型：利用ApplicationListener来监听事件，利用ApplicationEventMulticaster来派发事件。













